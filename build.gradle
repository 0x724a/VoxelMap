import java.text.SimpleDateFormat

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.4.3"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21


archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Runs the game with Iris when using runClient.
    //modImplementation "maven.modrinth:iris:1.5.1+1.19.3"

    //modImplementation "maven.modrinth:sodium:mc1.19.3-0.4.8"
    runtimeOnly "org.joml:joml:1.10.2"
    runtimeOnly "org.anarres:jcpp:1.4.14"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/voxelmap.accesswidener")
}

tasks.publish.dependsOn build
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName

            // add all the jars that should be included when publishing to maven
            //artifact(jar)             { builtBy remapJar }
            from components.java
        }
    }

    repositories {
        maven {
            url "$projectDir/../../CommonMaven"
        }
    }
}

tasks.register('updateChangelog') {
    group = 'build'
    description = 'Updates the changelog.'
    doLast {
        def changelogFile = file('changelog.md')
        def dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss")
        def currentDate = new Date()
        def currentDateString = dateFormat.format(currentDate)

        // Finde das letzte Update-Datum in der changelog.md Datei
        def lastUpdateDate = null
        if (changelogFile.exists()) {
            changelogFile.eachLine { line ->
                if (line.startsWith("Last update:")) {
                    lastUpdateDate = line.replace("Last update:", "").trim()
                }
            }
        }

        // Wenn kein Datum gefunden wurde, setze lastUpdateDate auf 3 Tage vor dem aktuellen Datum
        if (!lastUpdateDate) {
            def calendar = Calendar.getInstance()
            calendar.add(Calendar.DAY_OF_YEAR, -3)
            lastUpdateDate = dateFormat.format(calendar.time)
        }

        // Hole die Commits seit dem letzten Update-Datum
        def commits = []
        def process = "git log --since='${lastUpdateDate}'".execute()
        String commitHash = ""
        String author = ""
        String message = ""
        process.in.eachLine { line ->
            if (line.startsWith("commit")) {
                commitHash = line.replace("commit ", "")
            } else if (line.startsWith("Author:")) {
                def authorRegex = /Author:\s*([^<]+)/
                def authorMatch = (line =~ authorRegex)
                if (authorMatch) {
                    def authorName = authorMatch[0][1].trim()
                    author = authorName
                }
            } else if (line.startsWith("Date:")) {

            } else if (!line.isBlank()) {
                message = line.replaceAll(/^\s+|\s+$/, "")
            }

            if (!commitHash.isEmpty() && !author.isEmpty() && !message.isEmpty()) {
                if (!message.startsWith("Merge:") || !message.startsWith("Release")) {
                    commits << [commitHash: commitHash, author: author, message: message]
                }
                commitHash = ""
                author = ""
                message = ""
            }

        }
        process.waitFor()

        if (commits.isEmpty()) {
            println "No new commits since last update."
        } else {
            commits.each { commit ->
                println "- ${commit.message} (${commit.author})"
            }

            changelogFile.text = ""
            changelogFile.withWriter { writer ->
                writer << "## VoxelMap ${project.mod_version} \n"
                commits.each { commit ->
                    def commitLink = "https://github.com/fantahund/VoxelMap/commit/${commit.commitHash}"
                    writer << "- [${commit.message}](${commitLink}) (${commit.author})\n"
                }
                writer << "\nLast update: ${currentDateString}\n"
                println "changelog updated"
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_id
    versionNumber = project.mod_version
    versionName = "VoxelMap ${project.mod_version}"
    //versionType = "alpha"
    versionType = isMCVersionNonRelease() ? "beta" : "release"
    changelog = file("changelog.md").text
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ["fabric"]
    dependencies {
        required.project 'fabric-api'
    }
}

boolean isMCVersionNonRelease() {
    return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$') || project.minecraft_version.contains('pre') || project.minecraft_version.contains('rc')
}